@import "variables";

.if(@match, @property, @value) when (@property = @match) {
  @{property}: @value;
}

.ifNot(@match, @property, @value) when not (@value = @match) {
  @{property}: @value;
}

// Центрирование блока с произвольной шириной по горизонтали.
.center-position-horizontally() {
  position: absolute;
  left: 50%;
  transform: translateX(-50%); /* с вендорными префиксами все браузеры от ie 9 */
}

// Центрирование блока с произвольной высотой по вертикали.
.center-position-vertically() {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

// Центрирование блока с произвольными размерами
.center-position() {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// Центрирование блока с заданной высотой по горизонтали.
.center-position-horizontally(@width, @position: absolute) {
  position: @position;
  left: 50%;
  margin-left: -@width / 2;
}

// Центрирование блока с заданной шириной по вертикали.
.center-position-vertically(@height, @position: absolute) {
  position: @position;
  top: 50%;
  margin-top: -@height / 2;
}

// Центрирование блока с заданными размерами по горизонтали и вертикали.
.center-position(@width, @height: @width, @position: absolute) {
  .center-position-horizontally(@width, @position);
  .center-position-vertically(@height, @position);
}

// Базовые стили для псевдоэлементов
.pseudo(@width, @height: @width, @position: absolute, @content: '', @display: block) {
  content: @content;
  position: @position;
  display: @display;
  width: @width;
  height: @height;
}

// Колонки текста
.columns(@colWidth: 250px, @colCount: 0, @colGap: 50px, @colRuleWidth: 0, @colRuleColor: inherit, @colRuleStyle: solid) {
  column-width: @colwidth;
  column-count: @colcount;
  column-gap: @colgap;
  column-rule-color: @colRuleColor;
  column-rule-style: @colRuleStyle;
  column-rule-width: @colRuleWidth;
}

// Шрифт
.font(@size, @family: inherit, @color: inherit, @lineHeight: inherit, @letterSpacing: inherit, @weight: inherit, @style: inherit) {
  .ifNot(inherit, color, @color);
  font-size: @size;
  .ifNot(inherit, font-family, @family);
  .ifNot(inherit, font-weight, @weight);
  .ifNot(inherit, font-style, @style);
  .ifNot(inherit, line-height, @lineHeight);
  .ifNot(inherit, letter-spacing, @letterSpacing);
}

// Обрезка текста...
.elipsis() {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

// Границы
.border(@color: #000, @width: 1px, @radius: inherit, @style: solid) {
    border-width: @width;
    border-style: @style;
    border-color: @color;
  .ifNot(inherit, border-radius, @radius);
}

// Плавная смена свойств.
.transition(@property: all, @duration: 0.2s, @delay: 0s, @ease: ease-in) {
  transition+: @arguments;
}

// Используется для перекрытия блока.
.full-size(@bgColor: transparent) {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  .ifNot(transparent, background-color, @bgColor);
}

// Список, содержащий inline-block.
.inline-list(@verticalAlign: top, @fontSize: medium) {
  font-size: 0;

  & > * {
    display: inline-block;
    vertical-align: @verticalAlign;
    font-size: @fontSize;
  }
}

// Список, выровненный по ширине
.justify-list(@verticalAlign: top, @fontSize: medium) {
  text-align: justify;
  font-size: 0;

  &::after {
    display: inline-block;
    width: 100%;
    content: '';
  }

  & > * {
    display: inline-block;
    vertical-align: @verticalAlign;
    text-align: left;
    font-size: @fontSize;
  }
}

// Вложенные нумерованные списки
.decimal-list(@delimiter: '.', @selector: li) {
  counter-reset: item;

  @{selector} {
    &::before {
      content: counters(item, @delimiter) '@{delimiter} ';
      counter-increment: item;
    }
  }
}

// Clearfix
.clearfix() {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

// Иконка при наведении.
.icon-hover(@width, @height, @x, @y, @hover-x, @hover-y, @imageName: 'sprite.png', @duration: 0.3s, @property: all, @ease: ease-out, @delay: 0s) {
  position: relative;
  width: @width;
  height: @height;

  &::before,
  &::after {
    content: '';
    .full-size();
    .transition(@duration, @property, @ease, @delay);
  }

  &::before {
    .sprite(@x, @y, @imageName);
    opacity: 1;
  }

  &::after {
    .sprite(@hover-x, @hover-y, @imageName);
    opacity: 0;
  }

  &:hover {
    &::before {
      opacity: 0;
    }

    &::after {
      opacity: 1;
    }
  }
}

// Градиент.
.gradient(@gradient, @gradient-bottom: darken(@gradient, 15%)) {
    background: linear-gradient(to bottom, @gradient 0%, @gradient-bottom 100%);
}

.horizontal-gradient(@gradient-left, @gradient-right: darken(@gradient-left, 15%)) {
  background: linear-gradient(to right, @gradient-left, @gradient-right);
}

// Убирание желтого фона у полей с автокомплитом в Google Chrome
.autofill(@color: @white) {
  &:-webkit-autofill {
    -webkit-box-shadow: inset 0 0 0 50px @white !important;
    -webkit-text-fill-color: @color !important;
    color: @color !important;
  }
}